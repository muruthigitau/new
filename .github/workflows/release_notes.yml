# This action:
# 1. Generates release notes using GitHub API.
# 2. Strips unnecessary info like chore/style etc from notes.
# 3. Updates release info.

name: "Release Notes"

on:
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag of release like v1.0.0"
        required: true
        type: string
  release:
    types: [released]

permissions:
  contents: write

jobs:
  regen-notes:
    name: "Regenerate release notes"
    runs-on: ubuntu-latest

    steps:
      - name: Set tag name
        id: vars
        run: |
          echo "tag_name=${{ github.event.inputs.tag_name || github.event.release.tag_name }}" >> "$GITHUB_OUTPUT"

      - name: Generate and update release notes
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          TAG_NAME=${{ steps.vars.outputs.tag_name }}

          echo "Generating release notes for $TAG_NAME"

          # Generate new notes and clean them
          NEW_NOTES=$(gh api --method POST -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases/generate-notes \
            -f tag_name="$TAG_NAME" \
            | jq -r '.body' \
            | sed -E '/^\* (chore|ci|test|docs|style)/d' \
            | sed -E 's/by @mergify //')

          echo "Fetching release ID..."
          RELEASE_ID=$(gh api -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases/tags/"$TAG_NAME" \
            | jq -r '.id')

          echo "Updating release notes..."
          gh api --method PATCH -H "Accept: application/vnd.github+json" \
            /repos/${{ github.repository }}/releases/"$RELEASE_ID" \
            -f body="$NEW_NOTES"
